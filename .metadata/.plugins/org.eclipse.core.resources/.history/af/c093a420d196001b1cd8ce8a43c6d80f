package co.edu.usbcali.viajes.app.service;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import co.edu.usbcali.viajes.app.domain.TipoDestino;
import co.edu.usbcali.viajes.app.domain.TipoIdentificacion;
import co.edu.usbcali.viajes.app.repository.TipoDestinoRepository;
import net.bytebuddy.implementation.bytecode.Throw;

@Service
public class TipoDestinoServiceImpl implements TipoDestinoService {

	@Autowired
	private TipoDestinoRepository tipoDestinoRepository;

	@Override
	public void guardarTipoDestino(TipoDestino tipoDestino) throws Exception {
		if(tipoDestino.getIdTide() == null) {
			throw new Exception("debeingresar un id valido");
		}
		if(tipoDestino.getCodigo() == null || tipoDestino.getCodigo() == "" || tipoDestino.getCodigo().length() > 5 ) {
			throw new Exception("debe ingresar un codigo valido");
		}
		if(tipoDestino.getNombre() == null || tipoDestino.getNombre() == "" || tipoDestino.getNombre().length() > 100) {
			throw new Exception("debe ingresar un nombre valido");
		}
		if(tipoDestino.getDescripcion() == null || tipoDestino.getDescripcion() == "" || tipoDestino.getDescripcion().length() > 300) {
			throw new Exception("debe ingresar una descripcion valida");
		}
		if(tipoDestino.getFechaCreacion() == null ) {
			throw new Exception("debe ingresar una fecha de creacion valida");
		}
		if(tipoDestino.getFechaModificacion() == null) {
			throw new Exception("debe ingresar una feche de modificacion valida");
		}
		if(tipoDestino.getUsuCreador() == null) {
			throw new Exception("debe ingresar un usuario creador valido");
		}
		if(tipoDestino.getUsuModificador() == "" || tipoDestino.getUsuModificador().length() > 10) {
			throw new Exception("debe ingresar un usuario modificador valido" );
		}
		if(tipoDestino.getEstado() == null || tipoDestino.getEstado() == "" || tipoDestino.getEstado().length() > 1) {
			throw new Exception("debe ingresar un estado valido" );
		}else {
			try {
				tipoDestinoRepository.save(tipoDestino);
				System.out.print("tipo destino guardado");
			} catch (Exception e) {
				throw new Exception(e.getMessage());
			}
			
		}
	}

	@Override
	public List<TipoDestino> consultarTiposDestino() throws Exception {

		List<TipoDestino> lisTd = tipoDestinoRepository.findAll();

		if (lisTd.isEmpty()) {
			throw new Exception("NO se encontraron tipos de destino en el sistema");
		}

		return lisTd;
	}

	@Override
	public void eliminarTipoDestino(int idTd) throws Exception {
		// TODO Auto-generated method stub

	}

	@Override
	public void actualizarTipoDestino(TipoDestino tipoDestino) throws Exception {
		this.guardarTipoDestino(tipoDestino);
	}

}
